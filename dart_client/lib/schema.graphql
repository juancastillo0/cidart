"""The validation performed in a type, field or argument definition"""
directive @valida(jsonSpec: String!) on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Query {
  topOutput: String
  services: [ServiceConfig!]!
}

type ServiceConfig {
  serviceId: String!
  gitRepo: String!
  gitBranch: String!
  serverFile: String!
  commands: [CliCommand!]!
}

type CliCommand {
  name: String!
  command: String!
  createdDate: Date!
  variables: [CliCommandVariable!]!
}

"""An ISO-8601 Date."""
scalar Date

type CliCommandVariable {
  type: CliCommandVariableType!
  value: String!
}

enum CliCommandVariableType {
  environment
  constant
  dynamic
}

type Mutation {
  startService: [CompilerLog!]!
  createService(config: ServiceConfigInput!): ServiceConfig!
  deleteService(serviceId: String!): ServiceConfig
  compilations(
    """TODO: should the annotation be necessary?"""
    anyOf: [CompilationFilter!] @valida(jsonSpec: """
{"variantType":"list","each":{"variantType":"nested"}}
""")
  ): [Compilation!]!
}

type CompilerLog {
  toString: String!
  message: String!
  time: Date!
  result: ProcessExecResult
}

type ProcessExecResult {
  exitCode: Int!
  pid: Int!
  stderr: String!
  stdout: String!
}

input ServiceConfigInput {
  gitRepo: String!
  gitBranch: String!
  serverFile: String!
  commands: [CliCommandInput!]!
}

input CliCommandInput {
  name: String!
  command: String!
  variables: [CliCommandVariableInput!]!
}

input CliCommandVariableInput {
  type: CliCommandVariableType!
  value: String!
}

type Compilation {
  gitRepo: String!
  gitBranch: String!
  serverFile: String!
  commitHash: String!
  status: CompilationStatus!
  startTime: Date!
  endTime: Date
  logs: [CompilationLog!]!
}

enum CompilationStatus {
  pending
  started
  error
  success
}

type CompilationLog {
  command: CommandExecution
  time: Date!
  message: String!
}

type CommandExecution {
  command: CliCommand!
  status: CompilationStatus!
  durationMs: Int
  endTime: Date
  result: ProcessExecResult
}

input CompilationFilter {
  gitRepo: StringFilter
  gitBranch: StringFilter
  serverFile: StringFilter
  commitHash: StringFilter
  statusIsIn: [CompilationStatus!]
  startTime: DateTimeFilter
  endTime: DateTimeFilter
}

input StringFilter {
  contains: String
  regExp: String
  isIn: [String!] @valida(jsonSpec: """
{"variantType":"list","minLength":1}
""")
}

input DateTimeFilter {
  before: Date
  after: Date @valida(jsonSpec: """
{"variantType":"date","comp":{"moreEq":{"variantType":"ref","ref":"before","isRequired":false},"useCompareTo":true}}
""")
}

type Subscription {
  serviceUpdates(serviceId: String!): Compilation!
}